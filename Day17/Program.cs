using System;
using System.Collections.Generic;
using System.Linq;

namespace Day17
{
    internal class Program
    {
        static void Main(string[] args)
        {
            var sinput = @">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";
            var input = @"><<<<>>>><>>><<><<<<>>>><<>>><>>><<<<>>>><<>>>><<<>>>><<<>>>><<<>>><<<<>><>><<<<>>><><<<><><>>>><<<<><<<<>><<<>>>><<>><><>>>><<<>>><<<>>><<>>>><>>>><>><>>><<>><><<<<><>><<<>>>><<<>>><<<>><>><<<>>><<<<>>>><><<<>>><<<>>><<<<><<<<>>><<<<>>><<<>>><<<<>>><<>>><<><<<>><<<>>><<<<><<<<>>><<<><<>>>><<<>><>>><<>>><<<><<<<>>><<><<<<>>>><<>>>><<>>>><<<<>>><><<<<><>><<<>>>><<<<>><>>>><>><>><>><<<>><<<>>>><<<>><<>><<<<><<<<><<>>>><<<<><<<>>><>><<<>>><<<><<<><<<<><<><<<>>><<<<>>>><<<<><<>><<<<>>><>>><<<<><<<>>>><<><>><<<<>><<<<>>>><<<><<<<><<<<>>><<<><<>>><>>><<<<>>><<>><<<<>>><<<><<<>><<<<>>>><<<<><<><<<<>>>><>>>><<<<>>>><<<>>>><<<><<>>><>>><<<<>><<<<>>><><>><<<>>>><<<<>><<<>><<>><<<>>><<<>>>><<<<>>>><<>>>><<>>>><><<<<>><<<<>>>><<<<>>><<<<>><>><<<>>><>>>><><<>><<>>><<<>>>><>>><<>><<<>><>>><>>><><>><>><<<><<<>>>><>><<<><<<>>><<<<><<>>>><<<><<<>>>><>><<<>>>><<<>>>><>>><><>>>><>><<><<<>>>><<>>>><<<>>><<<<>>><<<>><>>>><<<<>>>><>><<>>><<<<>>>><<<<><>>>><<>><<>>>><>><<<<>>>><<<<>><<<>>>><<>><><>><<<<>><<<>>>><<<>>><<>><><<<>>>><<>><>><<>><>><<<<>><<<>>><<<<>>><<>>>><<>>><<<<>>><>><<><<<>><>>><<<>><<<<>>>><<<>>><<>>><<<>>><<<<>>>><<<<>>><<<>>><<>>>><<>>><<<>>><<><<>>>><<>>>><<><<>>><<><<<>>>><<<<><<<<>><<<>>>><>>><<<<>>><<<<>>>><<>><<<<>>>><<<><<<><<>>>><<<>>>><<<>>>><<<>><<>>><>>><<<<>>><<<<>><<<>>><<<>><<<<>>><<<<><<><>>><<<<>>><<<<>>>><>><<<<>><<<<>>>><<<<><<<>>>><>><<<<><<<<>>>><>><<><<<>>><<>>><<<<>><<<><<<><>><<>>>><<<><<<<><<<>>>><<<<>><<>><<<<>>>><><<<><<<>>>><<>>>><<>><<<<>>>><><><<<<><><<>>><<><<>>><>>><<>><><<><<>>>><<<<><<<>>>><<>><><<>>>><<<<><><<<>>>><<>>><<<><<<>>>><>><<<<>>>><>>><<><>>>><>>>><<<><>>><>>>><<<>><<<>>><<<<>>>><<>>>><<<<>>>><<><>><<<<>><<<<>>><<>>><>>>><<><<>>><>>>><<><<><<><><<<>><>><<<<>>><<<>>>><<<><<<<>><>><>>><<<<><<<>>>><<<>>><><<<<>>><<<<><<<<>>>><>><>>><<<><<>><<<><>>><<<<>><><<<<><>><<>><<>><>><<<<><<<>><>>>><<>><<<<>>><><<<>><<>><<>><>>><>>>><<><>><<<<>>><>>><<>>><<>>>><<>><<<<>>><>><<<>>><<<>>><<<<>>>><<<><<<<>><<><<<><<<>>><<><<>><>><>>><<<>>><<>><<>>><<>><<>><>><<<<>>>><<<<>>><<<>>>><<<<>>><<<>><<<>><<<<>>>><<>><<<<><<<<>><<>>><><<><<<<>>>><><>>>><<<<>>>><<<<>>>><<>><<<<>>>><<<><>><<>>>><<>>>><<<<>>>><<<>>><>><<>>>><<<>>>><<<<>>><<<<>><<<<>>>><<>>><<>>>><>>><>>>><><>><<<<>>>><<<>>>><<<>><<>>><<<<>>><>>>><<>>>><<<><>>><><<>>>><<>>>><<<>>>><<<<><<<<>>>><>>>><>><<<>>><<<>>>><<<>><<<>>><>><<>>><<><><<><<>>>><>>><<<<>><><>><>>><<<<><>>><<<>>><<<><<<<>>><<<>><<<>>><<>>><<<<><<<<><>><><<<<>>><<<>><<>><<<>><<<<>><>><>>>><<>>><<<>><<<>><<<<>><><<<<>>><<<>>>><<<<>>><<>><>><<>>><><<>>><<<>>><<<>><<>>>><<<<>><<<<>>>><<<><<><<<<>><<<<>><<<>>>><>><<<><>>>><<>>>><<><<<>>>><<<<>><<<>>>><<>>><>><<<<>>>><<<<>>><>>>><<<<><<><<>><>><>>><<<><<<<><<<<>><<<>>><<<<>><<><<<<>>>><<<>>>><<<>>>><<<<>>><<><<>><<><<<<>>>><<<><<<<>>>><<>>><<<<>><>>>><<<<>><<<>>>><<><<<<>>>><<<>><>>>><><<<>><<<><<<>>><>>>><>>><<<<><<<<>>><<>>><<<>>><<<<><<<<>>>><<>>><<<>><<>>><><<<>>>><<><>>><<>><<<>>>><<<><>><<<>>><<>>>><<<>>>><>><<><>><<>>>><<<>>>><<<<>>>><<<>>><<<>><<<<><<<<>><><<><<<>><>>><<<<>>><<<<>><<<>>><<>><<<<><<<><<<><<<>>><<<<>>><<<<>><<>>><<>><<<<>>>><<>>>><<>>>><<>><>>><>>>><<>>>><<<>>><<<<>>><>>><>>>><<<>><<>>><<>>>><<>>>><<<>>><<>>><<<><<<>><>>>><<<>><>>><<<>>><>>>><>><<>>><<<<>>><<<<>><>>><<<<>>><<<<><<<>>><><>>><<<>>><>><>>>><<>>>><<<>><<>>><<>><<<<>><<<<><>>><<>><<<<>>><<<>>><<>>>><>>>><<<><>>>><<><><>>><<>>>><<<>>>><><>><<<<>><<<>>>><<<<><<<<>>>><<<<>><>>>><<<>>>><<><<>>>><<<<>>>><<<<>>><>><>>>><>>>><>><<>>>><>>>><<>>><<<<>>>><<>>><><<>>>><<>><<<<><<><>>>><<<<>><<><<><<>><<<><<<>><<<<>>><<<<>><<>><>>><<<<>>>><<<<>>>><<<<>>><><<<<><<<<><><<<<><<<<>>>><<<<>>>><><>>><<<<><<<<><<<><><<<<>><><<<><<<<>><>>><><><<<><>>><<><<>><<<>><<<>>>><<<<>>><<>><<<<><>>><>>><<>>>><<<<>>><<<>>>><<<>>>><<<>><<<>><<<<>>><<<<>><>>><<<<><>>>><<<>><>>><<>>><<<<>><<><<<>><>>><<<>><<<<>>><<<>>>><>>><><<<><<<>>>><<>>><<><>>>><>>>><<<<>>><><><>>>><<<<>><<<<>>><<>>><<<><<<>>>><<><<<>><<<>>>><<<<>>>><>>><<<>>><><<<>><<<<>><<<>>>><>><<><><<>><<<>><<<>>><<<<>>>><<<><<<<>><<<<>>>><<<<>>>><<><<<<>>><<<<>><<<<>><<<>><<<<>>><<>>>><<>>><>><<>>>><>>><>>><<<><>>>><<<>>><<<<><<<<>>><<><><>>>><<>>>><<>>>><<<<>>>><<><<><<<>>><<<>>>><<><<<><<>>><<<><<<>>>><<<<>>><<>>>><<>><><<<><<>><<>>><<<<>><>><<<>><<<<>><<<<><<>>><<><<<<>>>><<<>><<<<>><<>>>><>>>><>>><>>>><<<>>><<<>>>><<>>>><>><>><<<>><<<>>><<>>><<<<>>><<<<>>><<>>>><>>><>><<<<>>>><<>>>><<>>>><<<<>>>><>>>><><>>><<>>>><<<<><<>>>><<<<>><<<<>>>><<>><<<<><<<<>>><<<<>><<>>>><<<>>>><<<><>><<<><<>>><<<<>><<<>>><><<<<>><<<<>><>>><<<<>>><<<<>>>><>>>><<>>>><<>>><>>>><<<<>>><<>><<<><<><<<>>>><<<>>>><<<<><<>>><>><<<<><<<>>><>><><<<><<>>>><>>>><>><<>>><<>>>><<>>>><<<<>><<>><><<>>><<>><<>><<>>><>><<<<>>>><<>>>><<<<>>><<>><><<<><>><<<>><>>><>><<>>><><>>><<>>>><<<>>><<<<>>><<<>><<>><<<<>>><<<><<<>><<<<><<>><>><<<<>><<>>>><<<>><<<>>>><<<<>>>><<<<>><<>>><<<>>><<<>>>><<<<>>><<<<>>>><>><<<<>>>><<>>><><<>>>><<<<>>>><<<<>>>><>><<>><<<<><<<<>>><><>>><<<<>>><<><>>>><<<<><<<>>>><>>>><<<>>>><<<>>>><<>>><<>>><<<<><<<>><>>><<<><<<>>><>><>><<>>><<<>>>><<><>>><><<>>><<<<>>>><>><>>><>><<>>><<<><<><<>>><<>>>><<>>>><<>>><<<>><<<<><<<><<<<>><<>><>>>><<>><>><<<>>>><<>>>><<><<<<>><>><>><>>>><>>>><<<>>><<>><>>>><<<<>><<>>>><<<<>>><<<>>>><<><<<>><<<<><<>>><<>>><<>>>><<>><>>><>>><<<>>><>>>><<><<><<<>><<><<<><<<>><<<<>>>><>>><<<>>>><<<>><<<<><<>>>><>><>><<<<>>><<<>>><><>>><>>><<<>>><<<<>>>><>>>><<<><>><<>><<<>>><>><><<<>>>><><>>>><<<><<<>><<<>>><<>>>><<<<><<<>>><>>>><<<<>><<<<>>>><<<>>><<<>><<<>><<<<>>><<<><<>><<<<>><<>><<><<<<>>>><<><<>>><<<<><<<<>>><<>>><<<>>><<><<<>>>><<<<>>>><>>><<><<>><<<>><<<>>><<<<>>>><>><<<<>><<<<>>><>>>><<<<>><<>>>><>>>><<<>><<<>>>><<<>>>><<>><<<<>><<<<><>>><<>>>><<><<<><<><<<<>>><<<<>><<>>><><>>><<<<>><<<<>>><<<>><><<<>><<<><><<><><<>>><><<<<>><<>>><<><<<>>><>>>><><<<<>>>><<<><><<>>>><<<>><<<>><<<<>><<>>>><<<<><<<<>>><>>><<><<<<><<<<>>><<>>><>><<<<>>>><<><<<>>>><>>>><<>>><>><<<<><>>>><<><<><>><<<<><<<><<<><<<><><<>>><<>>><<>>>><<>>>><<<<>><<<>>>><<<>>>><<<>><<>>><<<<><<<<><<><<<<><<<>>><<>><<>>>><<>>><>>><><><>><><<>>><<><<<<><<<<>>>><<<><<>>>><<><<<>><<<<>>><<<<><<>><>><<<>>><<<>>>><<<>>><<<<>>><<<>>><><<<>>><<<>><<<>><>>>><<<>><<>>>><<>>><><<><><><<<><<<>><><<<>>>><>><<>>><<>>><<<<>><>><>><<<<>><>>><><<<>>><>><<<<>>><>>><>>><<>>>><<<<><>><<<>>><<><<<><<<>><>>><<>>>><<>><<<><<<><<<<>>><<<<>>>><<>>>><<>><<>>><>>>><<>>><<<>>>><<<<>><<<<>>><<<>>>><<><<<>>><<<>>><<<<>>><>><<>>><<<>><<<<><<<<>>><<<>>>><<<<><<>>><>>>><<<<>>>><<>>>><<><<<><<>><<>>><<<>>><<>><>>><<<<>>><<<>><<<<><<<<>><<<<>>>><<<<>>><<<<>>>><<>><<>>>><<>><<<><<<<>>><<<><<<<>>>><<<<>>><<<<>><>>>><<<<>>>><<>>><>><<<>>><><<<<>><><<<<><>><<>>>><><<<><<<<><<<>><<<<><<<<><>>>><<<<><<<<>>><<<<>>><<<>><<><>>>><<<<><><<>>>><<<><><<>>><<<>>>><<<>>>><<<>>><><<<><<<<>>><<>>>><<>>>><><<<<>><<<>>>><<<>>>><<>>><><>>>><<<>><<><>><><<<>>>><<<<>>>><<<>>>><<><>>><<<<><<<<>>>><<>><<>>><<<<><><>>><<<<>>>><<<<><>>>><>>>><<<>>><><>>><<<>>>><<<>>>><<<>>><>><<>>><<>>>><<<>>><<<><>>><<>><<<>>><<<<>>>><<<>><<><<>>><>>>><<>><<<>><<><<>>><>><<<<>>><<<<><><<<>>>><<<>>>><<<>>><><<>><<>>>><><>>>><>>>><<<<><<>>><<<<>><<<<><><<<>>>><<<<>><<<>>>><<<><<>><<<<>>>><<<<>><>>>><>>>><<<>>><>>>><<>>>><<<>>><<>>><<<<><<<<>>>><><<>>><>><<<>>>><<<<><<<<><<<><><<<<>><<<>><<<>>><<<<>>><<<>>>><>><<>>><<>>>><<<>>><<>>>><<>>>><><><<<>><>>><<<<>><<<><<<<>><<<<>><<<<>><><>>>><<<<><<<>><<>>><<>>>><<<<>>>><<<<>>><<<>><>>>><<>>>><<>>><<<><<<<><<<<>><<>>><>><<<<><>><<<<>><<<><>><><<>><<>>>><<>>><>><<<>><<<<><<<<><<<>><>>><<>><<<>><<>>><<<<>>>><<<>><<>>>><>>><<>>><<<<>>>><><>>><<<>>>><<<<>>>><<<><<<>>><<>>>><><<<<><<<><>>>><><<<<>>><<<>><><<>>>><<<<><<<><<<<>><<>>>><<<<>>>><<<><<<<>><<<<>><<>><<<<>><<<>><><<<<>><>><><<>><<<<>>>><<<<>>>><>>><>>><<>><<<><<<<>><>>>><>><<<>>><<<>>><<<<><>><<<>>>><<>>>><<<><>>><<<>>>><>>><<<>>><<<><<<>>>><>>><><<<><<<>>>><<<>>><<<<><<<>>>><>>>><<><<<>>><<>>><<<<>>>><<>><>>>><>>><<>><<<<>><<>><<<<><<<<>>><<>>>><<><<<>>><<>>>><>>>><>><<<<>>>><>>><>><<<<>><<>>><<<<><<<<>>>><<<>><<>><<<<>>>><<><<<<>>><<<<>>><>>><<<<>>><<<>>><>><<<>>>><<<<>>>><<<<><<>><<<<>>><>>><<>>>><<>>>><<<>>><<<><<<>><<<<>>>><<<<><<<><>>>><<<<>>><<>>><<<>>><<<<>>><<<>>><<>><<<>>>><<<<><<>><<<<>><<<<>>><<<><<<>>>><<<<>>><>>>><<<>>>><<<<>>>><>>><<<<>>><<<><>>>><>><><<<><<<>>><<<>>><<<>>>><<><>><<><<<<>>>><<><<<<>>>><<>><<>>><<<<><<<><<<<>>>><>>><<<><<><>><<<<>>><<<<><<>>><<>>>><<<<><<<<>>>><<<><<<>>>><><<<>><<>>><<<<>>>><<<>>><<<<>>>><<<<>><<<<>>>><<<<>><<<<>>><<>><<<>>><<<<>><<>><<>>><<<>>><<<>>><><>><<>>>><>>>><<><>>><<<><<<>>>><<<<>><><<<<>>><<>>>><<<<>><<<<>>><<<>>><<>>>><>>>><>>><<<<>>><<><<>><<><>>><<<<><<<>>>><>><<<><<<<>>><<<>>><<<<>>><<<<>>>><<<><<<>>><>><<<><<>><<>>>><><<<<>>>><<<>>><<<>>>><<<<>>><<<<><<>><<<<>>><<<<><<><<>>>><>>>><<>>><<<<>>><>>>><<<>>>><<<><<><<<<>>>><>><>><>>><<>>><<>>>><<<<>><<>><>>>><<<>>><<<>>>><<<<><<><<<>>>><<<><<<<>>>><<<<>><<>>><>>><<>>>><<<>><<>>>><<>><<>>>><>><>><<<>>>><>>><<<>><<<>><<<><<<<>>><>>><>>>><<<><>><<<<>>>><<<>>><<<>>>><<>>><<<>><<<>>>><>>><><<<><>><>>><><<<>><<>>><<<>><<<<><<<<>>><<>><<<<>>>><<<<>><<>>>><<<>>><>><<>><<<<><<<<>><<<>><<<<>>>><>><<><<<>>>><<<<><<<<><<<>>><<<>>>><>>><<<>>><<<<>><>>><<<>>>><<<<><<<>>>><<>>>><<<>>><<<><>><<<<>>><<<><<<><<><<<<><<<<><>>>><<<<><<<>><>>><<<<>>><<><<<>><<<><<<<>>>><<<>>><>>>><<>>><<<>>>><<<<>>><<<<>><><>>>><<<<>><<>>><>>>><><<<<><<<>>><>>><<<>>><>><<<>>>><>>>><>><>>>><<<>>>><>>><>>><<><><<<>>><<<>><<<>>><<>><>>><<<>><<<<><>><<>><<><<<<>>><<>>><<>>>><<<<><>>>><<>><>>><<>>><<<<><>>>><<><<<>>>><<<<><<<><<<>>><<<>>><<<<>>><<>>><<<>><><<>>><<<>>><<<>><<<>><<<>>>><<<<>><<>>>><<<<>>><>><<<>>><><<><<<>>>><<>>><<>>>><>><<<<>><<>>><<<<><<<<>>><<<<>>><<<>><<<>><<<<>>><<>>>><<<><<<>><<><<>>>><<<<><<<<><<<<><<<>>>><>>><<<<>>><><<>>><><<>>>><>>>><>>>><<<>>>><><<<>><><>>><<<><<<>>>><<>>>><>>><>><>><<<<><<<<>>><>>>><<<<>><<<>>><<>>>><<>><<><<<>>>><<>>>><<>>>><><>>><<>>>><<>>>><>>><<>><><<>><>>><>>><<<>>><<<<>>><<>>>><<>>>><><<<<>>>><<>><>>><<>>>><<>>>><<<<>><<<<>><<<>>><<<<>><>>>><<><<<>>><<<<><<<<>>>><<<>>><<>><<<<>><<<<>><<>>><<<>>><>><<<<><<<<>>>><<>>><<>>>><<<>>>><<<>><<<>><>><<><<<>><>>><><<>>><<<>>><<<>>><<>>>><<<>>>><>><<<<><><>><<<<";

            var shapes = new[]
            {
                new[] { 15 },
                new[] { 2, 7, 2 },
                new[] { 7, 4, 4 },
                new[] { 1, 1, 1, 1 },
                new[] { 3, 3 }
            };

            Dictionary<(int, int), (int, int)> floors = new Dictionary<(int, int), (int, int)>();
            
            var tops = new int[7];
            var screen = new List<int>();
            //int maxI = 10;
            //for (int i = 0; i < maxI; i++)
            //{
            //    screen.Add(0);
            //}

            long MAX = 1_000_000_000_000;
            long skippedSteps = 0;
            long skippedHeight = 0;

            int cycle = 0;
            for (int i = 0; i < 3000; i++)
            {
                var shape = shapes[i % shapes.Length];
                int left = 2;
                int bottom = tops.Max() + 3;

                int screenTopNeeded = bottom + 4;
                if (screen.Count < screenTopNeeded)
                {
                    for (int z = screen.Count; z < screenTopNeeded; z++)
                    {
                        screen.Add(0);
                    }
                }

                bool fall = true;
                while (fall)
                {
                    char direction = input[cycle % input.Length];
                    if (direction == '<' && left > 0)
                    {
                        bool ok = true;
                        for (int r = 0; r < shape.Length && ok; r++)
                            if (((shape[r] << left) & 1) == 1 || (screen[bottom + r] & (shape[r] << (left - 1))) != 0)
                                ok = false;

                        if (ok) 
                            left--;
                    }
                    else if (direction == '>' && left < 6)
                    {
                        bool ok = true;
                        for (int r = 0; r < shape.Length && ok; r++)
                            if (((shape[r] << left) & 64) == 64 || (screen[bottom + r] & (shape[r] << (left + 1))) != 0)
                                ok = false;

                        if (ok) 
                            left++;
                    }

                    cycle++;

                    for (int j = 0; j < shape.Length; j++)
                    {
                        if (bottom == 0 || (screen[bottom + j - 1] & (shape[j] << left)) > 0)
                        {
                            fall = false;
                            break;
                        }
                    }

                    if (!fall)
                    {
                        for (int row = 0; row < shape.Length; row++)
                        {
                            var shapePosition = shape[row] << left;
                            screen[row + bottom] |= shapePosition;
                            for (int col = left; col < tops.Length; col++)
                            {
                                var height = ((shapePosition >> col) & 1) * (row + bottom + 1);
                                if (tops[col] < height) 
                                    tops[col] = height;
                            }
                        }
                        //Console.WriteLine($"{i} top: {tops.Max()} DEL shape: {i % shapes.Length}  wind: {(cycle - 1) % input.Length}");
                        //1 000 000 000 000 / 1750 = 571 428 571 + 750

                        //0 - 99(100) step: 151
                        //571 428 571 loop 2796 = 1 597 714 284 516

                        //(650) step: 1031


                        if (skippedSteps == 0)
                        {
                            if (bottom > 10 && (screen[bottom] | screen[bottom - 1]) == 127)
                            {
                                (int shape, int wind) key = (i % shapes.Length, (cycle - 1) % input.Length);
                                if (floors.ContainsKey(key))
                                {
                                    (int prevI, int prevHeight) = floors[key];
                                    long repetitions = MAX / (i - prevI) - 1;
                                    skippedSteps = repetitions * (i - prevI);
                                    skippedHeight = repetitions * (tops.Max() - prevHeight);
                                }
                                else
                                {
                                    floors.Add(key, (i, tops.Max()));
                                }
                            }
                        }
                        else if (i + skippedSteps + 1 == MAX)
                            Console.WriteLine(skippedHeight + tops.Max());
                    }
                    else
                    {
                        bottom--;
                    }
                }
            }

            Console.WriteLine(tops.Max());
        }
    }
}
