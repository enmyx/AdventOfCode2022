using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace Day23
{
    internal class Program
    {
        static void Main(string[] args)
        {
            var sinput = @"....#..
..###.#
#...#.#
.#...##
#.###..
##.#.##
.#..#..";
            var input = @".#....#...##....##.#.###..##..#..#.#.###....#.###.###.##..###......#..##.
...#.##.#..#.#.######...##..#.#...#########.#.######..#.#.#.#...###.#.#.#
###.#.####.#.##.##....##..###.##..##..#.###.#.#.##...#######...###.##...#
.#...#####.##......##.#..###....###..#..#...###..##..##.#.##.###.#.######
.#...#...#.###.....##.##.########.#.##...##..##..#....#.####.###.##......
#####.......###..##..##...#..#.....#..#..##.##...##..........#.#.##.#.###
##..###.#.###.###.#....#...###....#...#.###..##.##.###.#.#.#..###..##.##.
#......#..###....#..###.###.#.#..##..##.###.#.#..#.#.###..###..#..##.##.#
#..####....#.#..#.#.....#...#.##.##.##...#.##.#.#..#.##.#####..##.#.##.#.
.#######..#####.#.#.#...##.#.####.#.#.##....##.##..####..####.#..##..###.
.#.##.###.#######.#...#.##...###........#.###..#.###....#..#....#.##.##..
.#.#.####..##.#.#####.#.....##.###.#..##.##...##.###....####...##.#.#####
#..#..#.##.#....#.#.#.##.##...##..##.####..#..##......##.####..#.##.#.##.
#.#.#.##....##..####.###....####...####..#..##..#.#..........#.##..###..#
.#....###.#.#.#.####...######.#.##.......##..#..##.#...#...##.....####.#.
#.....#.#.###.##..##....##.##.##.#.##..##.##...###...#..#....#.#.##.#....
.##.#.#####.#......#..##.###..#..#..###.#........####.#.####.#.##.#####.#
..##.#.#..........#..#.##..#.#.#.....##.#.#.#######..#.##.###.#..#.#####.
.##..#.####.....#.#..#..###.##..###.##.##.#####..#.#.###...#.##.#.####.##
###.#.######...###...#..#..##.#####..#.#..#...##.#.#.#.##......#.##..#.##
#..#...#...#.##########.###..#.#.##..#.#..#####..######.###....##.##....#
##...#######..#######.#......###..##.#.##.####..###.###.#####..######.#.#
.###.####.#.#.##..####...##.##..#....#.#.#.#...#....#.##..#..#.....##.#.#
##..........#....##...#######.#.#####.##....##..#.#.##.#.#..#...##.##..##
##.......##..#.##...#..#..###.#.##......##...#.#...###..#....#..##.#.#...
#####.###....######.#.######.####..##..#..#.#....#######....##.###..##..#
##..#..#..##.#...##.#####.#.##..##...#..##.....#.#.#....##.##.#..#....###
..###.##.....#....###.#..#####.#.###.#.#..###.########....#.#.##........#
##.#...#...###..###.####..###.#######..######...##.#...#.#.#.###..##.#...
...#.#...####...###.##.##.##..#.#..##.#.#.####...#.#.....#...#..##....#..
####...#.#.#.......####.#..#..####.#..###.#......#..###...#.#.##...#....#
##......##...#.##..#.#...#####...#.#####....#....###.#..#...#....##.#..#.
...#####...#.....##.#.##.##..#.#..###.#.##.#####...##..#.#.##.##...###.#.
..#...##..####...##.###..#...#......##...##.#.#.###.#.#...#..#...#...####
.##.###.#.#.#.###.##...#.#.#...#.#...##..#.#....####.##...###..##..#...#.
.##.#####.#..##.##....##.##.#..##.#..##.#..#.##.###.....#..##.###.##...##
#.#...####..#.#....##...##..#...##...##.##.##.#..#.#.......####.#.###..#.
##.#.##...#.#.#..#.#..##.#.#.##..#....#..###.##.##.##.....#..#..###.##.#.
...#...#.#......########.###.#.#.###.####.#.#.####...#.#.#.....#...###...
....###.#.#..##..#.#.#.##.###.###.....###.##.##.##.#.##..#...#.####..##.#
#....###.........#.##..#..#.##.##....#.##..#.#.##......#.##.#..##..##....
#....####.#....####.##.#.#...#.####.#.#.##..#.##.####...#..##.##.##.#.##.
...##..#..#...##.#.#.#.####...#.#...#.#.#.###..#.###..#..##.#.#..#####...
..#####..######.##.##..#.####.#.#..#...#....#.#..#########..##.#.####.##.
#..#.#...#.####...#......#.#...#.#.###..#..#.#....#..#..##..#..##.#......
#.####...#######..###.#.#..##...##.#...#####...##....#.##.#.#.###..##.###
####..###...##..######..#####..#...#####...#.#.####.##.....##....#.#...##
.#####.#..##.###.......###.######.#######.#.##..###.###...#.#...#..#####.
.##.###...##..##..#.###.#.##.###...###...##.#...#..##.##...####.###...##.
#..#..#..##..#.#.#.##....##..#...##.##....##.###.##.#....#...#....#####..
.#..#..######...#.#.##.###.###.#.#...#.#....#..#..##.##..#..####...#.###.
##.##.#####..###.##.#.#.###......###.#.##....###..#..####.###......##....
#.#.###..#..###.#....#.#....##.#...#.##.####.#.##......#.#..##.#....#..##
####..##.#..#...###....#.##...#..#.#...#.####....##..#..##...#..#.....#..
..#..###.#..#.##....#######..##......#.##...##.##.##.##..#.#..##.##......
.##.#.#.###....####.#.#.###..#.###....#..#..###..##..###.#..#.##.#..####.
..###..##.##...#..#...#...#.#.##..####.#..#..#.#..######.##.#.##....#.#..
..###.......##.#.##.####.##...##.#######.#..#..###..#.#.##.#...##.###.##.
##.#..#.##.#.###.####..#.##.......###.########.#.#....#.#...###.#.#.#..##
#.#..#..##...####...#...#.###.##...##.....#...#..#.####.#.#.##.#####.....
.######.#..#..#...#..#..#..##.##.##...#....##.#.#.##.###..##....#########
##....#...#.###...########.#####.#######.#...#.##.#..#..#.###.#.######.##
.###.#....##.#.#.#.#.##..#####.####.###.#..#.##..##..##..##.....#.#.#####
#.#.###.#..##...###.#.....###.##..##.....##.###.####..###.#...#..##.###.#
#####.#####.#...##.######.#..#.####.##.#.#..#.....####.#...#.#.....##..##
.#.#.#.###.#.#.##.##...#####...#.....##.##.#######..#####.#.##..##...##..
#.#...##.#.###...##.#.#.##.#....####....#.#.#..#..##.####.##..#.#.....##.
.##.#.##..#####..#..#.#.###..##.#....######..##...###.#...##..##.#....###
.##...#..#.#######.#.#...##.##.##.#...##....#.###.#....#.#..##.###..#.###
####.#....#.#..#.#...#..#..#..##....##..####.#.####.#..#..#..#.#..#.#.##.
.####..#.##..#.#.###...########.##.##...#.##....##..##.#.####...#..#.##..
###.#.#...#.#...##.#.###......##...###.#..#.##.########.###......###.####
##..#####..#.#.##.#######.######....#.###..#.#...#...#.###.#.##..#...##..";

            var lines = input.Split('\n');

            var elves = new List<Elf>();
            int row = 0;
            foreach (var lineugly in lines)
            {
                var line = lineugly.TrimEnd('\r');

                for (int i = 0; i < line.Length; i++)
                {
                    if (line[i] == '#')
                    {
                        elves.Add(new Elf() { Position = (i, row) });
                    }
                }
                
                row++;
            }

            var directionInRound = Direction.North;

            for (int i = 0; i < int.MaxValue; i++)
            {
                var moves = new Dictionary<(int x, int y), Elf>();
                var map = CreateMap(elves);

                foreach (var elf in elves)
                {
                    var possibleMoves = new List<(int, int)>();
                    (int x, int y) position = elf.Position;

                    for (int d = 0; d < 4; d++)
                    {
                        var direction = (Direction)(((int)directionInRound + d) % 4);
                        (bool possible, (int x, int y) newPosition) = ConsiderPositionToDirection(direction, position, map);
                        if (possible)
                        {
                            possibleMoves.Add(newPosition);
                        }
                    }

                    if (possibleMoves.Count > 0 && possibleMoves.Count < 4)
                    {
                        var move = possibleMoves.First();
                        if (!moves.ContainsKey(move))
                            moves.Add(possibleMoves.First(), elf);
                        else
                            moves[move] = null;
                    }
                }

                if (!moves.Any())
                {
                    Console.WriteLine(i + 1);
                    break;
                }
                foreach (var move in moves)
                {
                    if (move.Value != null)
                        move.Value.Position = move.Key;
                }

                directionInRound = (Direction)(((int)directionInRound + 1) % 4);

                //PrintMap(elves);
            }

            PrintResult(elves);
        }

        private static (int[,] map, int offsetX, int offsetY) CreateMap(List<Elf> elves)
        {
            int minX = elves.Select(e => e.Position.x).Min();
            int maxX = elves.Select(e => e.Position.x).Max();
            int minY = elves.Select(e => e.Position.y).Min();
            int maxY = elves.Select(e => e.Position.y).Max();

            int offsetX = 1 - minX;
            int offsetY = 1 - minY;

            var map = new int[(maxY + 3 - minY), (maxX + 3 - minX)];

            foreach (var elf in elves.Select(e => e.Position))
            {
                map[elf.y - minY + 1, elf.x - minX + 1] = 1;
            }

            return (map, offsetX, offsetY);
        }

        private static void PrintMap(List<Elf> elves)
        {
            int minX = elves.Select(e => e.Position.x).Min();
            int maxX = elves.Select(e => e.Position.x).Max();
            int minY = elves.Select(e => e.Position.y).Min();
            int maxY = elves.Select(e => e.Position.y).Max();

            for (int Y = minY; Y <= maxY; Y++)
            {
                for (int X = minX; X <= maxX; X++)
                {
                    if (elves.Any(e => e.Position == (X, Y)))
                        Console.Write("#");
                    else
                        Console.Write(".");
                }

                Console.WriteLine();
            }

            Console.WriteLine();
        }

        private static void PrintResult(List<Elf> elves)
        {
            int minX = elves.Select(e => e.Position.x).Min();
            int maxX = elves.Select(e => e.Position.x).Max();
            int minY = elves.Select(e => e.Position.y).Min();
            int maxY = elves.Select(e => e.Position.y).Max();

            var grid = (maxX + 1 - minX) * (maxY + 1 - minY);
            Console.WriteLine(grid - elves.Count);
        }

        private static (bool possible, (int x, int y) newPosition) ConsiderPositionToDirection(Direction direction, (int x, int y) position, (int[,] map, int offsetX, int offsetY) map)
        {
            var elves = map.map;
            var X = map.offsetX;
            var Y = map.offsetY;
            switch (direction)
            {
                case Direction.North:
                    position.y--;
                    if (elves[position.y + Y, position.x + X] == 1
                        || elves[position.y + Y, position.x + X - 1] == 1
                        || elves[position.y + Y, position.x + X + 1] == 1)
                    {
                        return (false, position);
                    }

                    return (true, position);
                case Direction.South:
                    position.y++;
                    if (elves[position.y + Y, position.x + X] == 1
                        || elves[position.y + Y, position.x + X - 1] == 1
                        || elves[position.y + Y, position.x + X + 1] == 1)
                    {
                        return (false, position);
                    }

                    return (true, position);
                case Direction.West:
                    position.x--;
                    if (elves[position.y + Y, position.x + X] == 1
                        || elves[position.y + Y - 1, position.x + X] == 1
                        || elves[position.y + Y + 1, position.x + X] == 1)
                    {
                        return (false, position);
                    }

                    return (true, position);
                case Direction.East:
                    position.x++;
                    if (elves[position.y + Y, position.x + X] == 1
                        || elves[position.y + Y - 1, position.x + X] == 1
                        || elves[position.y + Y + 1, position.x + X] == 1)
                    {
                        return (false, position);
                    }

                    return (true, position);
            }

            return (false, position);
        }
    }

    class Elf
    {
        //public int X { get; set; }
        //public int Y { get; set; }
        public (int x, int y) Position { get; set; }
    }

    enum Direction
    {
        North = 0,
        South = 1,
        West = 2,
        East = 3
    }
}
